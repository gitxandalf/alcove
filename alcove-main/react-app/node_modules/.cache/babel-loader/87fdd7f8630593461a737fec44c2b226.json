{"ast":null,"code":"const LOAD = \"images/LOAD\";\nconst ADD_IMAGE = \"images/ADD_IMAGE\";\nconst EDIT_IMAGE = \"images/EDIT_IMAGE\";\nconst DELETE_IMAGE = \"images/DELETE_IMAGE\";\n\nconst load = list => ({\n  type: LOAD,\n  list\n});\n\nconst addImage = image => ({\n  type: ADD_IMAGE,\n  image\n});\n\nconst editImage = image => ({\n  type: EDIT_IMAGE,\n  image\n});\n\nexport const getImages = () => async dispatch => {\n  const response = await fetch(`/api/images/`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list));\n  }\n};\nexport const getImage = payload => async dispatch => {\n  const response = await fetch(`/api/images/${payload}`);\n\n  if (response.ok) {\n    const image = await response.json();\n    dispatch(getImages());\n    dispatch(addImage(image));\n  }\n};\nexport const postImage = payload => async dispatch => {\n  const {\n    userId,\n    albumId,\n    imageUrl,\n    name,\n    description\n  } = payload;\n  const response = await fetch(`/api/images/add-image`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"user_id\": userId,\n      \"album_id\": albumId,\n      \"image_url\": imageUrl,\n      \"name\": name,\n      \"description\": description\n    })\n  });\n\n  if (response.ok) {\n    const submission = await response.json();\n    dispatch(addImage(submission));\n    return submission;\n  }\n};\nexport const updateImage = payload => async dispatch => {\n  const {\n    id,\n    userId,\n    albumId,\n    imageUrl,\n    name,\n    description\n  } = payload;\n  const response = await fetch(`/api/images/${payload.id}/edit-image`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"id\": id,\n      \"user_id\": userId,\n      \"album_id\": albumId,\n      \"image_url\": imageUrl,\n      \"name\": name,\n      \"description\": description\n    })\n  });\n\n  if (response.ok) {\n    const edit = await response.json();\n    dispatch(editImage(edit));\n    dispatch(getImage(id));\n    return edit;\n  }\n};\nexport const removeImage = id => async dispatch => {\n  const response = await fetch(`/api/images/${id}`, {\n    method: 'delete'\n  });\n\n  if (response.ok) {\n    dispatch(getImages());\n  }\n};\nconst initialState = {\n  entries: []\n};\n\nconst imageReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case LOAD:\n      {\n        const usersEntries = [...action.list.users].reduce((a, b) => {\n          return { ...a,\n            [b.id]: {\n              id: b.id,\n              username: b.username,\n              image_url: b.image_url\n            }\n          };\n        }, {});\n        return { ...state,\n          entries: [...action.list.images],\n          usersEntries: usersEntries\n        };\n      }\n\n    case ADD_IMAGE:\n      {\n        return { ...state,\n          entries: [...state.entries, action.image]\n        };\n      }\n\n    case EDIT_IMAGE:\n      {\n        return { ...state,\n          [action.payload]: action.id\n        };\n      }\n\n    case DELETE_IMAGE:\n      {\n        newState = { ...state\n        };\n        delete newState[action.image];\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default imageReducer;","map":{"version":3,"sources":["/home/xander/appacademy-class-work/capstone/main/alcove/alcove-main/react-app/src/store/image.js"],"names":["LOAD","ADD_IMAGE","EDIT_IMAGE","DELETE_IMAGE","load","list","type","addImage","image","editImage","getImages","dispatch","response","fetch","ok","json","getImage","payload","postImage","userId","albumId","imageUrl","name","description","method","headers","body","JSON","stringify","submission","updateImage","id","edit","removeImage","initialState","entries","imageReducer","state","action","newState","usersEntries","users","reduce","a","b","username","image_url","images"],"mappings":"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","sourcesContent":["const LOAD = \"images/LOAD\";\nconst ADD_IMAGE = \"images/ADD_IMAGE\"\nconst EDIT_IMAGE = \"images/EDIT_IMAGE\"\nconst DELETE_IMAGE = \"images/DELETE_IMAGE\"\n\n\nconst load = list => ({\n    type: LOAD,\n    list\n})\n\nconst addImage = image => ({\n    type: ADD_IMAGE,\n    image,\n});\n\nconst editImage = image => ({\n    type: EDIT_IMAGE,\n    image,\n})\n\nexport const getImages = () => async dispatch => {\n    const response = await fetch(`/api/images/`);\n\n    if (response.ok) {\n        const list = await response.json();\n        dispatch(load(list));\n    }\n}\n\nexport const getImage = (payload) => async dispatch => {\n    const response = await fetch(`/api/images/${payload}`);\n\n    if (response.ok) {\n        const image = await response.json();\n\n        dispatch(getImages())\n        dispatch(addImage(image))\n    }\n}\n\nexport const postImage = (payload) => async dispatch => {\n    const { userId, albumId, imageUrl, name, description } = payload\n    const response = await fetch(`/api/images/add-image`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"user_id\": userId,\n            \"album_id\": albumId,\n            \"image_url\": imageUrl,\n            \"name\": name,\n            \"description\": description,\n        }),\n    })\n\n    if (response.ok) {\n        const submission = await response.json()\n        dispatch(addImage(submission))\n        return submission;\n    }\n}\n\nexport const updateImage = (payload) => async dispatch => {\n    const { id, userId, albumId, imageUrl, name, description } = payload\n    const response = await fetch(`/api/images/${payload.id}/edit-image`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"id\": id,\n            \"user_id\": userId,\n            \"album_id\": albumId,\n            \"image_url\": imageUrl,\n            \"name\": name,\n            \"description\": description,\n        })\n    })\n    if (response.ok) {\n        const edit = await response.json()\n        dispatch(editImage(edit))\n        dispatch(getImage(id))\n        return edit\n    }\n}\n\nexport const removeImage = (id) => async dispatch => {\n    const response = await fetch(`/api/images/${id}`, {\n        method: 'delete'\n    });\n\n    if (response.ok) {\n        dispatch(getImages())\n    }\n}\n\nconst initialState = {\n    entries: []\n};\n\nconst imageReducer = (state = initialState, action) => {\n    let newState;\n\n    switch (action.type) {\n\n        case LOAD: {\n\n            const usersEntries = [...action.list.users].reduce((a, b) => {\n                return { ...a, [b.id]: { id: b.id, username: b.username, image_url: b.image_url } }\n            }, {})\n            return {\n                ...state,\n                entries: [...action.list.images],\n                usersEntries: usersEntries\n            }\n        }\n\n        case ADD_IMAGE: {\n            return {\n                ...state,\n                entries: [...state.entries, action.image]\n            }\n        }\n\n        case EDIT_IMAGE: {\n            return {\n                ...state,\n                [action.payload]: action.id\n            }\n        }\n\n        case DELETE_IMAGE: {\n            newState = { ...state };\n            delete newState[action.image]\n            return newState;\n        }\n\n        default: return state;\n    }\n}\n\nexport default imageReducer;\n"]},"metadata":{},"sourceType":"module"}