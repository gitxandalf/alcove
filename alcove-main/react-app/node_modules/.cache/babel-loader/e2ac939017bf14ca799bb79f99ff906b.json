{"ast":null,"code":"const LOAD = \"articles/LOAD\";\nconst ADD_ARTICLE = \"articles/ADD_ARTICLE\";\nconst EDIT_ARTICLE = \"articles/EDIT_ARTICLE\";\nconst DELETE_ARTICLE = \"articles/DELETE_ARTICLE\";\n\nconst load = list => ({\n  type: LOAD,\n  list\n});\n\nconst addArticle = article => ({\n  type: ADD_ARTICLE,\n  article\n});\n\nconst editArticle = article => ({\n  type: EDIT_ARTICLE,\n  article\n});\n\nexport const getArticles = () => async dispatch => {\n  const response = await fetch(`/api/articles/`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list));\n  }\n};\nexport const getArticle = payload => async dispatch => {\n  const response = await fetch(`/api/articles/${payload}`);\n\n  if (response.ok) {\n    const article = await response.json();\n    dispatch(getArticles());\n    dispatch(addArticle(article));\n  }\n};\nexport const postArticle = payload => async dispatch => {\n  const {\n    userId,\n    imageUrl,\n    title,\n    articleContent\n  } = payload;\n  const response = await fetch(`/api/articles/add-article`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"user_id\": userId,\n      \"image_url\": imageUrl,\n      \"title\": title,\n      \"article_content\": articleContent\n    })\n  });\n\n  if (response.ok) {\n    const submission = await response.json();\n    dispatch(addArticle(submission));\n    return submission;\n  }\n};\nexport const updateArticle = payload => async dispatch => {\n  const {\n    id,\n    userId,\n    imageUrl,\n    title,\n    articleContent\n  } = payload;\n  const response = await fetch(`/api/articles/${payload.id}/edit-article`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"id\": id,\n      \"user_id\": userId,\n      \"image_url\": imageUrl,\n      \"title\": title,\n      \"article_content\": articleContent\n    })\n  });\n\n  if (response.ok) {\n    const edit = await response.json();\n    dispatch(editArticle(edit));\n    dispatch(getArticle(id));\n    return edit;\n  }\n};\nexport const removeArticle = id => async dispatch => {\n  const response = await fetch(`/api/articles/${id}`, {\n    method: 'delete'\n  });\n\n  if (response.ok) {\n    dispatch(getArticles());\n  }\n};\nconst initialState = {\n  entries: []\n};\n\nconst articleReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case LOAD:\n      {\n        const usersEntries = [...action.list.users].reduce((a, b) => {\n          return { ...a,\n            [b.id]: {\n              id: b.id,\n              username: b.username,\n              image_url: b.image_url\n            }\n          };\n        }, {});\n        return { ...state,\n          entries: [...action.list.articles],\n          usersEntries: usersEntries\n        };\n      }\n\n    case ADD_ARTICLE:\n      {\n        return { ...state,\n          entries: [...state.entries, action.article]\n        };\n      }\n\n    case EDIT_ARTICLE:\n      {\n        return { ...state,\n          [action.payload]: action.id\n        };\n      }\n\n    case DELETE_ARTICLE:\n      {\n        newState = { ...state\n        };\n        delete newState[action.article];\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default articleReducer;","map":{"version":3,"sources":["/home/xander/appacademy-class-work/capstone/main/alcove/alcove-main/react-app/src/store/article.js"],"names":["LOAD","ADD_ARTICLE","EDIT_ARTICLE","DELETE_ARTICLE","load","list","type","addArticle","article","editArticle","getArticles","dispatch","response","fetch","ok","json","getArticle","payload","postArticle","userId","imageUrl","title","articleContent","method","headers","body","JSON","stringify","submission","updateArticle","id","edit","removeArticle","initialState","entries","articleReducer","state","action","newState","usersEntries","users","reduce","a","b","username","image_url","articles"],"mappings":"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","sourcesContent":["const LOAD = \"articles/LOAD\";\nconst ADD_ARTICLE = \"articles/ADD_ARTICLE\"\nconst EDIT_ARTICLE = \"articles/EDIT_ARTICLE\"\nconst DELETE_ARTICLE = \"articles/DELETE_ARTICLE\"\n\n\nconst load = list => ({\n    type: LOAD,\n    list\n})\n\nconst addArticle = article => ({\n    type: ADD_ARTICLE,\n    article,\n});\n\nconst editArticle = article => ({\n    type: EDIT_ARTICLE,\n    article,\n})\n\nexport const getArticles = () => async dispatch => {\n    const response = await fetch(`/api/articles/`);\n\n    if (response.ok) {\n        const list = await response.json();\n        dispatch(load(list));\n    }\n}\n\nexport const getArticle = (payload) => async dispatch => {\n    const response = await fetch(`/api/articles/${payload}`);\n\n    if (response.ok) {\n        const article = await response.json();\n\n        dispatch(getArticles())\n        dispatch(addArticle(article))\n    }\n}\n\nexport const postArticle = (payload) => async dispatch => {\n    const { userId, imageUrl, title, articleContent } = payload\n    const response = await fetch(`/api/articles/add-article`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"user_id\": userId,\n            \"image_url\": imageUrl,\n            \"title\": title,\n            \"article_content\": articleContent,\n        }),\n    })\n\n    if (response.ok) {\n        const submission = await response.json()\n        dispatch(addArticle(submission))\n        return submission;\n    }\n}\n\nexport const updateArticle = (payload) => async dispatch => {\n    const { id, userId, imageUrl, title, articleContent } = payload\n    const response = await fetch(`/api/articles/${payload.id}/edit-article`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"id\": id,\n            \"user_id\": userId,\n            \"image_url\": imageUrl,\n            \"title\": title,\n            \"article_content\": articleContent,\n        })\n    })\n    if (response.ok) {\n        const edit = await response.json()\n        dispatch(editArticle(edit))\n        dispatch(getArticle(id))\n        return edit\n    }\n}\n\nexport const removeArticle = (id) => async dispatch => {\n    const response = await fetch(`/api/articles/${id}`, {\n        method: 'delete'\n    });\n\n    if (response.ok) {\n        dispatch(getArticles())\n    }\n}\n\nconst initialState = {\n    entries: []\n};\n\nconst articleReducer = (state = initialState, action) => {\n    let newState;\n\n    switch (action.type) {\n\n        case LOAD: {\n\n            const usersEntries = [...action.list.users].reduce((a, b) => {\n                return { ...a, [b.id]: { id: b.id, username: b.username, image_url: b.image_url } }\n            }, {})\n            return {\n                ...state,\n                entries: [...action.list.articles],\n                usersEntries: usersEntries\n            }\n        }\n\n        case ADD_ARTICLE: {\n            return {\n                ...state,\n                entries: [...state.entries, action.article]\n            }\n        }\n\n        case EDIT_ARTICLE: {\n            return {\n                ...state,\n                [action.payload]: action.id\n            }\n        }\n\n        case DELETE_ARTICLE: {\n            newState = { ...state };\n            delete newState[action.article]\n            return newState;\n        }\n\n        default: return state;\n    }\n}\n\nexport default articleReducer;\n"]},"metadata":{},"sourceType":"module"}