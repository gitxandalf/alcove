{"ast":null,"code":"const LOAD = \"comments/LOAD\";\nconst ADD_COMMENT = \"comments/ADD_COMMENT\";\nconst EDIT_COMMENT = \"comments/EDIT_COMMENT\";\nconst DELETE_COMMENT = \"comments/DELETE_COMMENT\";\n\nconst load = list => ({\n  type: LOAD,\n  list\n});\n\nconst addComment = comment => ({\n  type: ADD_COMMENT,\n  comment\n});\n\nconst editComment = comment => ({\n  type: EDIT_COMMENT,\n  comment\n});\n\nconst deleteComment = comment => ({\n  type: DELETE_COMMENT,\n  comment\n});\n\nexport const getComments = () => async dispatch => {\n  const response = await fetch(`/api/comments/`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list.comments));\n  }\n};\nexport const postComment = payload => async dispatch => {\n  const {\n    userId,\n    articleId,\n    imageId,\n    commentContent\n  } = payload;\n  const response = await fetch(`/api/comments/add-comment`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"user_id\": userId,\n      \"article_id\": articleId,\n      \"image_id\": imageId,\n      \"comment_content\": commentContent\n    })\n  });\n\n  if (response.ok) {\n    const submission = await response.json();\n    dispatch(addComment(submission));\n    return submission;\n  }\n};\nexport const updateComment = payload => async dispatch => {\n  const {\n    id,\n    userId,\n    articleId,\n    imageId,\n    commentContent\n  } = payload;\n  const response = await fetch(`/api/comments/${id}/edit-comment`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"id\": id,\n      \"user_id\": userId,\n      \"article_id\": articleId,\n      \"image_id\": imageId,\n      \"comment_content\": commentContent\n    })\n  });\n\n  if (response.ok) {\n    const edit = await response.json();\n    dispatch(editComment(edit));\n    return edit;\n  }\n};\nexport const removeComment = id => async dispatch => {\n  const response = await fetch(`/api/comments/${id}`, {\n    method: 'delete'\n  });\n\n  if (response.ok) {\n    const comment = await response.json();\n    dispatch(deleteComment(comment));\n  }\n};\nconst initialState = {\n  entries: []\n};\n\nconst commentReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case LOAD:\n      {\n        return { ...state,\n          entries: [...action.list]\n        };\n      }\n\n    case ADD_COMMENT:\n      {\n        return { ...state,\n          entries: [...state.entries, action.comment]\n        };\n      }\n\n    case EDIT_COMMENT:\n      {\n        return { ...state,\n          [action.payload]: action.id\n        };\n      }\n\n    case DELETE_COMMENT:\n      {\n        newState = { ...state\n        };\n        delete newState[action.comment];\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default commentReducer;","map":{"version":3,"sources":["/home/xander/appacademy-class-work/capstone/main/alcove/alcove-main/react-app/src/store/comment.js"],"names":["LOAD","ADD_COMMENT","EDIT_COMMENT","DELETE_COMMENT","load","list","type","addComment","comment","editComment","deleteComment","getComments","dispatch","response","fetch","ok","json","comments","postComment","payload","userId","articleId","imageId","commentContent","method","headers","body","JSON","stringify","submission","updateComment","id","edit","removeComment","initialState","entries","commentReducer","state","action","newState"],"mappings":"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","sourcesContent":["\nconst LOAD = \"comments/LOAD\"\nconst ADD_COMMENT = \"comments/ADD_COMMENT\"\nconst EDIT_COMMENT = \"comments/EDIT_COMMENT\"\nconst DELETE_COMMENT = \"comments/DELETE_COMMENT\"\n\n\nconst load = list => ({\n    type: LOAD,\n    list\n})\n\nconst addComment = comment => ({\n    type: ADD_COMMENT,\n    comment,\n})\n\nconst editComment = comment => ({\n    type: EDIT_COMMENT,\n    comment,\n})\n\nconst deleteComment = comment => ({\n    type: DELETE_COMMENT,\n    comment,\n})\n\nexport const getComments = () => async dispatch => {\n    const response = await fetch(`/api/comments/`)\n\n    if (response.ok) {\n        const list = await response.json()\n        dispatch(load(list.comments))\n    }\n}\n\nexport const postComment = (payload) => async dispatch => {\n    const { userId, articleId, imageId, commentContent } = payload\n    const response = await fetch(`/api/comments/add-comment`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"user_id\": userId,\n            \"article_id\": articleId,\n            \"image_id\": imageId,\n            \"comment_content\": commentContent\n        }),\n    })\n\n    if (response.ok) {\n        const submission = await response.json()\n        dispatch(addComment(submission))\n        return submission\n    }\n}\n\nexport const updateComment = (payload) => async dispatch => {\n    const { id, userId, articleId, imageId, commentContent } = payload\n    const response = await fetch(`/api/comments/${id}/edit-comment`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"id\": id,\n            \"user_id\": userId,\n            \"article_id\": articleId,\n            \"image_id\": imageId,\n            \"comment_content\": commentContent\n        })\n    })\n    if (response.ok) {\n        const edit = await response.json()\n        dispatch(editComment(edit))\n        return edit\n    }\n}\n\nexport const removeComment = (id) => async dispatch => {\n    const response = await fetch(`/api/comments/${id}`, {\n        method: 'delete'\n    })\n\n    if (response.ok) {\n        const comment = await response.json()\n        dispatch(deleteComment(comment))\n    }\n}\n\nconst initialState = {\n    entries: []\n}\n\nconst commentReducer = (state = initialState, action) => {\n    let newState\n    switch (action.type) {\n\n        case LOAD: {\n            return {\n                ...state,\n                entries: [...action.list]\n            }\n        }\n\n        case ADD_COMMENT: {\n            return {\n                ...state,\n                entries: [...state.entries, action.comment]\n            }\n        }\n\n        case EDIT_COMMENT: {\n            return {\n                ...state,\n                [action.payload]: action.id\n            }\n        }\n\n        case DELETE_COMMENT: {\n            newState = { ...state }\n            delete newState[action.comment]\n            return newState\n        }\n\n        default: return state\n    }\n}\n\nexport default commentReducer"]},"metadata":{},"sourceType":"module"}